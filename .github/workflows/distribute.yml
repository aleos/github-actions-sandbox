name: Distribute

on:
  workflow_call:
    inputs:
      scheme:
        required: true
        type: string

env:
  DEVELOPER_DIR: /Applications/Xcode_14.3.1.app/Contents/Developer

jobs:
  distribute:
    name: Distribute
    runs-on: macos-13
    env:
      BUILD_DIR: ${{ github.workspace }}/build
      SCHEME: ${{ inputs.scheme }}
      CURRENT_PROJECT_VERSION: ${{ github.run_id }}
      FILE_NAME: "filename-${{ inputs.scheme }}-${{ secrets.Some_SECREt }}"
      NAME2: ${{ secrets[format('{0}_SECREt', inputs.scheme)] }}

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache SPM dependencies
        uses: actions/cache@v3
        with:
          path: ${BUILD_DIR}/DerivedData/SourcePackages
          key: ${{ runner.OS }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.OS }}-spm-
  

      - name: Generate build number
        uses: onyxmueller/build-tag-number@v1
        with:
          token: ${{secrets.github_token}}
          prefix: 0.2.6
      - name: Print new build number
        run: echo "Build number is $BUILD_NUMBER"
        
      - name: Generate changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT: ${{ toJSON(github.event) }}
        run: |
          CHANGELOG_PATH=${RUNNER_TEMP}/CHANGELOG
          touch ${CHANGELOG_PATH}
          echo "CHANGELOG_PATH=${CHANGELOG_PATH}" >> $GITHUB_ENV

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "#${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}" >> $CHANGELOG_PATH
            echo "" >> $CHANGELOG_PATH
            if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
              echo "‼️ MERGED PULL REQUEST 🚀"

              if [ -n "${{ github.event.pull_request.body }}" ]; then
                echo "${{ github.event.pull_request.body }}" >> $CHANGELOG_PATH
                echo "" >> $CHANGELOG_PATH
              fi
              TARGET_BRANCH=${{ github.base_ref }}
              echo "TARGET_BRANCH is $TARGET_BRANCH"
              BRANCH_NAME=${{ github.head_ref }}
              echo "BRANCH_NAME is $BRANCH_NAME"

              PR_NUMBERS=$(git log --reverse --merges --pretty=format:%s ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -o "Merge pull request #\([0-9]*\)" | sed -n 's/Merge pull request #\([0-9]*\).*/\1/p')
              while read N; do
                MESSAGE=$(gh pr view ${N} --json title,body | jq -r '.body')
                if [ -n "${MESSAGE}" ]; then
                  echo "${MESSAGE}" >> ${CHANGELOG_PATH}
                fi
              done <<< "${PR_NUMBERS}"
            else
              echo "‼️ PULL REQUEST 🏃‍♂️"

              echo "..." >> $CHANGELOG_PATH
              if [[ -n "${{ github.event.before }}" ]] && [[ -n "${{ github.event.after }}" ]]; then
                BEFORE_SHA=${{ github.event.before }}
                AFTER_SHA=${{ github.event.after }}
              else
                BEFORE_SHA=${{ github.event.pull_request.base.sha }}
                AFTER_SHA=${{ github.event.pull_request.head.sha }}
              fi

              COMMITS=$(git log --pretty=format:"%h: %s" --reverse $BEFORE_SHA..$AFTER_SHA)

              while read COMMIT; do
                if [ -n "${COMMIT}" ]; then
                  echo "${COMMIT}" >> ${CHANGELOG_PATH}
                fi
              done <<< "${COMMITS}"
            fi
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "‼️ PUSH 🎲"

            jq -r '.commits[] | "\(.id[0:7]): \(.message)\n" | @base64' <<< ${GITHUB_EVENT} | while read MESSAGE; do
              echo ${MESSAGE} | base64 --decode | head -n1 >> ${CHANGELOG_PATH}
            done
          else
            echo "This is a pull request which is not merged. No further actions."
          fi

          echo "CHANGELOG IS"
          cat $CHANGELOG_PATH

      - name: Install xcbeautify
        run: brew install xcbeautify
        
      - name: Distribute Test
        env:
          SOME_ENV_VAR: ${{ secrets.Some_SECREt }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT: ${{ toJSON(github.event) }}
          SAFE_CHANGELOG_PATH: ${{ env.SAFE_CHANGELOG_PATH }}
        run: |
          echo "Test logs"

          echo "Branch is ${GITHUB_BASE_REF}"
          echo "Scheme is ${SCHEME}"
          echo "Version is ${CURRENT_PROJECT_VERSION}"
          echo "RUN_ID is ${GITHUB_RUN_ID}"
          echo "github.run_number is ${{ github.run_number }}"
          echo "github.run_attempt is ${{ github.run_attempt }}"
          echo "Filename is ${FILE_NAME}"
          echo "ENV var is ${SOME_ENV_VAR}"
          echo "NAME2 is ${NAME2}, NAME2 length is `echo ${NAME2} | wc -m`"

          mkdir -p ${BUILD_DIR}
          xcodebuild -showBuildTimingSummary \
            -project "A.xcodeproj" \
            -scheme "A" \
            -destination 'generic/platform=iOS Simulator' \
            -archivePath "${BUILD_DIR}/A.xcarchive" \
            -resultBundlePath "${BUILD_DIR}/Artifacts/A.xcresult" \
            -derivedDataPath "${BUILD_DIR}/DerivedData/" \
            CURRENT_PROJECT_VERSION="7" \
            build | tee ${BUILD_DIR}/xcodebuild.log | xcpretty 

      - name: Upload xcodebuild.log
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: xcodebuild-log
          path: ${BUILD_DIR}/xcodebuild.log
